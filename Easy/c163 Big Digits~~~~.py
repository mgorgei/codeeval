'''BIG DIGITS

In this challenge you're presented with a situation in which you need to output
big symbols on devices which only support ASCII characters and single,
fixed-width fonts. To do this you're going to use pseudo-graphics to ‘draw’
these big symbols.

Here is an example of the font with digits from 0 to 9:

-**----*--***--***---*---****--**--****--**---**--
*--*--**-----*----*-*--*-*----*-------*-*--*-*--*-
*--*---*---**---**--****-***--***----*---**---***-
*--*---*--*-------*----*----*-*--*--*---*--*----*-
-**---***-****-***-----*-***---**---*----**---**--
--------------------------------------------------
Each pixel is marked either with asterisk ‘*’ or with minus ‘-’. Size of a digit
is 5×6 pixels.

Your task is to write a program, which outputs the numbers given to you with the
font as in the example.

INPUT SAMPLE:
The first argument is a file that contains the lines with digits sequences you
need to magnify. E.g.:
3.1415926
1.41421356
01-01-1970
2.7182818284
4·8·15·16·23·42

OUTPUT SAMPLE:
Print to stdout the magnified digits:
***----*---*-----*--****--**--***---**--
---*--**--*--*--**--*----*--*----*-*----
-**----*--****---*--***---***--**--***--
---*---*-----*---*-----*----*-*----*--*-
***---***----*--***-***---**--****--**--
----------------------------------------

--*---*-----*---*---***----*--***--****--**--
-**--*--*--**--*--*----*--**-----*-*----*----
--*--****---*--****--**----*---**--***--***--
--*-----*---*-----*-*------*-----*----*-*--*-
-***----*--***----*-****--***-***--***---**--
---------------------------------------------

-**----*---**----*----*---**--****--**--
*--*--**--*--*--**---**--*--*----*-*--*-
*--*---*--*--*---*----*---***---*--*--*-
*--*---*--*--*---*----*-----*--*---*--*-
-**---***--**---***--***--**---*----**--
----------------------------------------

***--****---*---**--***---**----*---**--***---**---*---
---*----*--**--*--*----*-*--*--**--*--*----*-*--*-*--*-
-**----*----*---**---**---**----*---**---**---**--****-
*-----*-----*--*--*-*----*--*---*--*--*-*----*--*----*-
****--*----***--**--****--**---***--**--****--**-----*-
-------------------------------------------------------

-*----**----*--****---*---**--***--***---*---***--
*--*-*--*--**--*-----**--*-------*----*-*--*----*-
****--**----*--***----*--***---**---**--****--**--
---*-*--*---*-----*---*--*--*-*-------*----*-*----
---*--**---***-***---***--**--****-***-----*-****-
--------------------------------------------------
'''
def f(test='1'):
    charmap = []
    charmap.append('-**----*--***--***---*---****--**--****--**---**--')
    charmap.append('*--*--**-----*----*-*--*-*----*-------*-*--*-*--*-')
    charmap.append('*--*---*---**---**--****-***--***----*---**---***-')
    charmap.append('*--*---*--*-------*----*----*-*--*--*---*--*----*-')
    charmap.append('-**---***-****-***-----*-***---**---*----**---**--')
    charmap.append('--------------------------------------------------')
    test = test.strip()
    bnum = []
    for digit in test:
        if digit.isnumeric():
            bnum.append(digit)
    sol = []
    sol.append("")
    sol.append("")
    sol.append("")
    sol.append("")
    sol.append("")
    sol.append("")
    for i in range(6):
        for num in bnum:
            sol[i]+= charmap[i][int(num)*5:(int(num)+1)*5]
    result = ""
    for i in range(6):
        result+= sol[i] + ' \n'
    print(result[:-1])
